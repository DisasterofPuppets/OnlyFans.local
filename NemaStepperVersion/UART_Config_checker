//works, but values are wrong and UART fails


#include <SoftwareSerial.h>      // ESPSoftwareSerial v8.1.0 by Dirk Kaar and Peter Lerup
#include <TMCStepper.h>
#include <ESP8266WiFi.h>         // Ensure ESP8266 compatibility

/* Stepper test for ESP8266 using TMC2208 driver in UART mode and Nema Stepper

This code allows you to use the Serial Monitor to send 'Open' or 'Close' commands.
The motor will move in the specified direction until the corresponding limit switch is triggered.
A 'Kill' command can be sent to immediately halt all operations, requiring a manual reboot.
A 3-second movement timeout is included as a safety feature.
A direction inversion flag is available for easy motor wiring correction.

2025 Disaster of Puppets

===============================================================================
                              WIRING TABLE
===============================================================================

ESP8266 (NodeMCU)    | TMC2208 Driver    | NEMA17 Stepper    | Switches/Power
---------------------|-------------------|-------------------|------------------
D3 (GPIO0)           | STEP              | -                 | -
D4 (GPIO2)           | DIR               | -                 | -
D7 (GPIO13)          | EN                | -                 | -
D1 (GPIO5)           | UART (Driver TX)  | -                 | -
D2 (GPIO4)           | UART (Driver RX)  | -                 | - 
D5 (GPIO14)          | -                 | -                 | Open Switch (Pin 1)
D6 (GPIO12)          | -                 | -                 | Closed Switch (Pin 1)
3V3                  | VDD               | -                 | -
GND                  | GND               | -                 | Open Switch (Pin 2)
GND                  | -                 | -                 | Closed Switch (Pin 2)
-                    | VM                | -                 | 12-24V Power Supply (+)
-                    | GND               | -                 | 12-24V Power Supply (-)

// ** UART Connection Details: **
// 1. Connect D1 (RX) directly to TMC2208 UART pin
// 2. Connect D2 (TX) to one leg of 1kΩ resistor
// 3. Connect other leg of resistor to TMC2208 UART pin
// 4. Both RX and TX connect to the SAME UART pin on TMC2208

Example:
ESP8266                                     TMC2208
RX (D1) ----------------------------------- UART
                           |
TX (D2) ------[1kΩ]-------|


If you haven't soldered the pads below to enable UART connect MS1 & 2 to Ground
GND                  | MS1               | -                 | -
GND                  | MS2               | -                 | -


TMC2208 Driver      | NEMA17 Stepper    | Wire Color        | Description
--------------------|-------------------|-------------------|------------------
1A                  | Coil 1 End        | Black             | Phase A+
1B                  | Coil 1 Start      | Green             | Phase A-
2A                  | Coil 2 Start      | Blue              | Phase B+
2B                  | Coil 2 End        | Red               | Phase B-

Additional TMC2208 Connections:
- MS1: Leave floating (internal pulldown for UART mode)
- MS2: Leave floating (internal pulldown for UART mode)
- SPREAD: Leave floating (controlled via UART)
- VREF: Leave floating (current set via UART)
- SENSE: Connect 0.11Ω sense resistor between SENSE and GND (usually on-board)

Power Supply Requirements:
- ESP8266: 3.3V (from USB or external regulator)
- TMC2208 Logic: 3.3V (VDD pin)
- TMC2208 Motor: 12-24V (VM pin) - Match your NEMA17 voltage rating
- Current: Minimum 2A for typical NEMA17 motors

Switch Connections:
- Use normally open (NO) switches
- One terminal to ESP8266 pin, other terminal to GND
- Internal pullup resistors are enabled in code

UART Communication:
- PDN_UART pin on TMC2208 handles both TX and RX
- Connect to both D1 and D2 on ESP8266 for bidirectional communication
- **TX (D2 / GPIO4)** must be connected **via a 1kΩ resistor** to protect against bus contention
- Ensure 3.3V logic levels (TMC2208 is 3.3V tolerant)
*/

// ====================== Pin Definitions =========================
#define STEP_PIN D3           // Step signal pin GPIO0
#define DIR_PIN D4            // Direction control pin GPIO2
#define ENABLE_PIN D7         // Enable pin (active LOW) GPIO13  
#define OPEN_SWITCH_PIN D5    // Open/anticlockwise switch GPIO14
#define CLOSED_SWITCH_PIN D6  // Closed/clockwise switch GPIO12 
#define RX_PIN D1             // TMC2208 RX pin
#define TX_PIN D2            // TMC2208 TX pin


// ====================== TMC2208 Configuration ===================
//Locate the Sense Resistors: They are two small, black, rectangular surface-mount (SMD) components usually located close to the main TMC driver chip. 
//There is one for each motor coil (Phase A and Phase B). You only need the value from one, as they will be identical.
//Read the Code: These tiny resistors have a code printed on them. You may need a magnifying glass and good light to see it. You are looking for a code like:
//R110 or R11 -> This means 0.110 Ω (The 'R' indicates the decimal point's position)
//R100 or R10 -> This means 0.100 Ω
//R150 or R15 -> This means 0.150 Ω
//R220 or R22 -> This means 0.220 Ω


#define R_SENSE 0.100f         // External sense resistor (Ω)
#define DRIVER_ADDRESS 0b00   // TMC2208 default address

// Create TMC2208Stepper using SoftwareSerial via RX/TX
SoftwareSerial tmc_serial(RX_PIN, TX_PIN);
TMC2208Stepper driver(&tmc_serial, R_SENSE);

// ====================== Stepper / TMC22087 Config =====================
const uint16_t STEPS_PER_REV = 200; // How many steps your Stepper takes to complete a single 360 movement.
const bool INVERT_DIRECTION = false; // If your motors going in the opposite direction, but you CBF swapping you coil wiring.
const unsigned long MOVEMENT_TIMEOUT_MS = 3000; // how long the motor will move if no limit switch is triggered. (safety feature)

// --- BASIC STEPPER CONFIGURATION ---
// *** CHOOSE YOUR MICROSTEPPING LEVEL HERE ***
// Higher values = smoother but less torque. Lower values = more torque but more vibration.
// Valid values: 1, 2, 4, 8, 16, 32
const uint16_t MICROSTEPS = 4;

// RMS current in milliamps (mA) to be sent to the motor coils.
// Good practice is to set this to ~85% of your motor's rated current to keep it cool.
// Example: For a common 1.7A NEMA17 motor, a safe value is 1.7 * 0.85 = 1.445A, so you would use 1445.
// Note: The TMC2208 driver itself can handle ~1200mA with just a heatsink, ~1400mA with a fan, and ~1000mA with no heatsink.
const uint16_t RMS_CURRENT = 1200;


// --- AUTOMATIC SPEED CONFIGURATION ---
const bool STEP_DELAY_AUTO = true; // Set to 'false' to use a manual value below.
const uint32_t TOTAL_DELAY_PER_FULL_STEP = 2400; // Baseline: (16 microsteps * 150µs delay)

#if STEP_DELAY_AUTO
  const uint16_t STEP_DELAY = TOTAL_DELAY_PER_FULL_STEP / MICROSTEPS;
#else
  const uint16_t STEP_DELAY = 600; // Manual override value
#endif

// --- ADVANCED TMC2208 CONFIGURATION ---

// StealthChop (false) is quiet but has less torque. SpreadCycle (true) has more torque but is noisier.
const bool ENABLE_SPREADCYCLE = true;

// Interpolates all microstep settings to 1/256 for ultra-smooth motion. Highly recommended.
const bool ENABLE_INTERPOLATION = true;

// Dynamically adjusts motor current based on load. Improves efficiency and reduces heat.
const bool ENABLE_PWM_AUTOSCALE = true;

// Automatically adjusts PWM gradient based on current scaling. Requires PWM_AUTOSCALE.
const bool ENABLE_PWM_AUTOGRAD = false;

// Sets PWM frequency. 0=Low Freq (more torque ripple), 3=High Freq (less audible noise).
// Valid values: 0, 1, 2, 3
const uint8_t PWM_FREQUENCY = 0;

// Sets the current multiplier when the motor is idle (0-31). 16 is ~50% of run current.
// Lower values save power and reduce heat when the motor is stopped. Bump this up if the motor isn't holding.
const uint8_t HOLD_CURRENT_MULTIPLIER = 16;

// Delay before motor current is reduced to the hold current level.
// Value is a multiplier between 0 - 15. 10 is a good default.
const uint8_t HOLD_DELAY = 10;

// Sets the run current multiplier (0-31). 31 means 100% of RMS_CURRENT.
// You can use this to globally scale down the current without changing RMS_CURRENT.
const uint8_t RUN_CURRENT_MULTIPLIER = 31;


// ====================== State Machine & Globals =================
enum MotorState {
  IDLE,
  MOVING_OPEN,  // Anti-clockwise
  MOVING_CLOSE  // Clockwise
};
MotorState currentState = IDLE;

// Variable to store the start time of a movement for timeout tracking
unsigned long movementStartTime = 0;


// =================================| **** SETUP **** |=================================

void setup() {
  Serial.begin(115200);

  pinMode(ENABLE_PIN, OUTPUT);
  //Immediately disable the motor to prevent any odd startup behaviour
  digitalWrite(ENABLE_PIN, HIGH);
  
  pinMode(STEP_PIN, OUTPUT);
  digitalWrite(STEP_PIN, LOW); //Set to a known state

  pinMode(DIR_PIN, OUTPUT);
  digitalWrite(DIR_PIN, LOW); //Set to a known state

  pinMode(OPEN_SWITCH_PIN, INPUT_PULLUP);

  pinMode(CLOSED_SWITCH_PIN, INPUT_PULLUP);

  driver.begin(); // initiate the driver after we disable the enable pin.

  delay(100);

  // Test UART communication
  Serial.println("Testing TMC2208 UART connection...");
  if (driver.test_connection()) {
    Serial.println("UART connection successful");
  } else {
    Serial.println("UART connection FAILED - Check wiring!");
    Serial.println("Commands may not be reaching the driver properly.");
  }

  

  unsigned long lastPromptTime = 0;
  const unsigned long PROMPT_INTERVAL_MS = 5000; // 5 seconds

  Serial.println("\n\nPress Enter to begin the setup...");
  lastPromptTime = millis(); 

  while (Serial.available() == 0) {
    if (millis() - lastPromptTime >= PROMPT_INTERVAL_MS) {
      Serial.println("Press Enter to begin the setup...");
      lastPromptTime = millis();
    }
    yield();
  }
  
  // Clear the serial buffer to consume the "Enter" keypress
  while(Serial.available() > 0) {
    Serial.read();
  }

  Serial.println("\nUser connected. Initializing system...");
  Serial.println("-----------------------------------------------------");
  Serial.println("\nStepper UART control started.");
  Serial.println("Enter 'Open', 'Close', 'Kill, 'Config', 'Debug','Comtest' or '?' and press Enter.");
  Serial.println("Enter '?' to see these instructions again or for more information");
  Serial.println("Enter 'KILL' to Stop all function Immediately");
  Serial.println("-----------------------------------------------------\n");
  
  delay(100);

  applyConfiguration();
  
  Serial.println("\nSystem ready. Motor is idle, waiting for command entry.");
  Serial.println("_");
}


// =================================| **** Configuration Functions **** |=================================


// =================================| Sets the TMC settings based on user variable values|=================================
/**
 * Applies all settings from the global constants to the TMC2208 driver.
 */
void applyConfiguration() {
  // Add a small delay between each command to ensure the TMC2208 has time to process it.
  Serial.println("Setting RMS Current to..");
  Serial.print(RMS_CURRENT);
  driver.rms_current(RMS_CURRENT);
  //driver.rms_current(1200, 0.5);  // 1200mA, 50% hold current

  delay(100);  // Give time for setting to apply
  Serial.println("Setting Microsteps...");  
  driver.microsteps(MICROSTEPS);
  delay(100);
  Serial.println("Enabling SpreadCycle...");
  driver.en_spreadCycle(ENABLE_SPREADCYCLE);
  delay(100);
  Serial.println("ENABLE INTERPOLATION...");
  driver.intpol(ENABLE_INTERPOLATION);
  delay(100);
  Serial.println("PWM AUTOSCALE...");
  driver.pwm_autoscale(ENABLE_PWM_AUTOSCALE);
  delay(100);
  Serial.println("PWM AUTOGRAD...");
  driver.pwm_autograd(ENABLE_PWM_AUTOGRAD);
  delay(100);
  Serial.println("PWM FREQUENCY...");
  driver.pwm_freq(PWM_FREQUENCY);
  delay(100);
  Serial.println("HOLD CURRENT MULTIPLIER...");
  driver.ihold(HOLD_CURRENT_MULTIPLIER);
  delay(100);
  Serial.println("RUN_CURRENT_MULTIPLIER...");  
  driver.irun(RUN_CURRENT_MULTIPLIER);
  delay(100);
  Serial.println("HOLD_DELAY...");  
  driver.iholddelay(HOLD_DELAY);
  delay(100);

  // These are fundamental for UART mode and should not be changed.
  Serial.println("I_scale_analog...");  
  driver.I_scale_analog(false);
  delay(100);
  Serial.println("internal_Rsense...");
  driver.internal_Rsense(false);
  delay(100);

  
  // --- Verification Section ---
  Serial.println("\n--- Reading back applied settings ---");
  
  Serial.print("Applied RMS Current (mA): ");
  Serial.println(driver.rms_current());
  
  Serial.print("Applied Microsteps: ");
  Serial.println(driver.microsteps());
  
  Serial.print("SpreadCycle enabled: ");
  Serial.println(driver.en_spreadCycle());
  
  Serial.print("Interpolation enabled: ");
  Serial.println(driver.intpol());
  
  Serial.print("PWM Autoscale enabled: ");
  Serial.println(driver.pwm_autoscale());
  
  Serial.print("PWM Autograd enabled: ");
  Serial.println(driver.pwm_autograd());
  
  Serial.print("PWM Frequency: ");
  Serial.println(driver.pwm_freq());
  
  Serial.print("Hold Current Multiplier (ihold): ");
  Serial.println(driver.ihold());
  
  Serial.print("Run Current Multiplier (irun): ");
  Serial.println(driver.irun());
  
  Serial.print("Hold Delay (iholddelay): ");
  Serial.println(driver.iholddelay());
  
  Serial.print("I_scale_analog: ");
  Serial.println(driver.I_scale_analog());
  
  Serial.print("internal_Rsense: ");
  Serial.println(driver.internal_Rsense());
}


// =================================| Queries current settings and displays |=================================

/**
 * Queries the TMC2208 for its current settings and prints them to the Serial Monitor.
 * This provides a "source of truth" report from the hardware itself.
 */
void reportConfiguration() {
  Serial.println("-----------------------------------------------------");
  Serial.println("Querying TMC2208 for Actual Driver Settings");
  Serial.println("=============================================");

  if (!driver.test_connection()) {
    Serial.println("TMC2208 UART communication: FAILED. Cannot read settings.");
    Serial.println("-----------------------------------------------------");
    return;
  }
  
  Serial.println("TMC2208 UART communication: OK");
  
  // Basic Settings
  Serial.print("RMS Current: ");
  Serial.print(driver.rms_current());
  Serial.println(" mA");

  Serial.print("Microstep Input Set To: 1/");
  Serial.print(MICROSTEPS);
  Serial.print(" -> Actual Driver Resolution: 1/");
  Serial.print(driver.microsteps());
  Serial.println();
  
  // Advanced Settings
  Serial.print("Mode: ");
  Serial.println(driver.en_spreadCycle() ? "SpreadCycle (High Torque)" : "StealthChop (Quiet)");
  
  Serial.print("Interpolation to 1/256: ");
  Serial.println(driver.intpol() ? "Enabled" : "Disabled");
  
  Serial.print("PWM Autoscale: ");
  Serial.println(driver.pwm_autoscale() ? "Enabled" : "Disabled");
  
  Serial.print("PWM Autograd: ");
  Serial.println(driver.pwm_autograd() ? "Enabled" : "Disabled");
  
  Serial.print("PWM Frequency: ");
  Serial.println(driver.pwm_freq());

  Serial.print("Hold Current Multiplier: ");
  Serial.println(driver.ihold());

  Serial.print("Run Current Multiplier: ");
  Serial.println(driver.irun());
  
  Serial.print("Hold Delay: ");
  Serial.println(driver.iholddelay());
  
  Serial.println("-----------------------------------------------------");
}

// =================================| Handle serial input functions |=================================

void handleSerialCommands() {
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    // The 'Kill' command is a special case and must be processed immediately,
    // regardless of the current motor state.
    if (command.equalsIgnoreCase("Kill")) {
      stopMotor("!!! KILL COMMAND RECEIVED. ");
      Serial.println("System halting. Manual reboot required.");
      while (true) {
        // Use yield() in an infinite loop on ESP8266 to prevent watchdog reset
        yield();
      }
      return; // Stop further processing
    }

    // If the motor is currently moving, reject any other command.
    if (currentState != IDLE) {
      Serial.println("Sorry, you must wait for the current command to complete before inputting another. Your command has not been queued.");
      Serial.println("_");
      return; // Ignore the command and exit the function
    }

    // If we reach this point, the motor is IDLE and the command was not 'Kill'.
    // We can now process the other commands.
    if (command.equalsIgnoreCase("Open")) {
      if (digitalRead(OPEN_SWITCH_PIN) == LOW) {
        // The "Open" switch being triggered means the door is already open.
        Serial.println("Sorry, the door is already open.");
        Serial.println("_");
        return;
      }
      Serial.println("Received 'Open' command. Moving...");
      currentState = MOVING_OPEN;
      digitalWrite(DIR_PIN, INVERT_DIRECTION ? HIGH : LOW);
      digitalWrite(ENABLE_PIN, LOW);
      movementStartTime = millis();
    }
    else if (command.equalsIgnoreCase("Close")) {
      if (digitalRead(CLOSED_SWITCH_PIN) == LOW) {
        Serial.println("Sorry, the door is already closed.");
        Serial.println("_");
        return;
      }
      Serial.println("Received 'Close' command. Moving...");
      currentState = MOVING_CLOSE;
      digitalWrite(DIR_PIN, INVERT_DIRECTION ? LOW : HIGH);
      digitalWrite(ENABLE_PIN, LOW);
      movementStartTime = millis();
    }
    else if (command.equalsIgnoreCase("Config")) {
      reportConfiguration();
      Serial.println("_");
    }
    else if (command.equalsIgnoreCase("?")) {
      Serial.println("**************************************************************************************************************");
      Serial.println("                                                HELP                                                          ");
      Serial.println("**************************************************************************************************************");
      Serial.println("The available commands you can enter are 'Open', 'Close', 'Kill, 'Config', 'Debug', 'Comtest' and '?'");
      Serial.println("They are not case sensitive");
      Serial.println("");
      Serial.println("OPEN - Runs the stepper motor Anti-clockwise and stops when the Open switch (Connected to D5) is pulled LOW");
      Serial.println("CLOSE - Runs the stepper motor Clockwise and stops when the Closed switch (Connected to D6) is pulled LOW");
      Serial.println("Both close and Open will stop automatically if a limit switch is not triggered within 3 seconds");
      Serial.println("KILL - Immediately stops all actions, manual reboot is required");
      Serial.println("DEBUG - Prints out any driver error messages");
      Serial.println("CONFIG - Displays the current paramateres applied to the TMC2208");
      Serial.println("COMTEST - Tests to confirm UART mode is working");
      Serial.println("? - Displays this text");
      Serial.println("**************************************************************************************************************");
      Serial.println("_");
    }
    else if (command.equalsIgnoreCase("debug")) {
      printDriverStatus();
    }
    else if (command.equalsIgnoreCase("comtest")) {
      // Test communication
      Serial.println("TMC2208 UART Test Starting...");
      delay(1000);
      if (testTMC2208()) {
        Serial.println("TMC2208 UART: SUCCESS");
      } else {
        Serial.println("TMC2208 UART: FAILED");
      }
    }
    else {
      // Handles empty commands (like a lone Enter press) and unknown commands
      if (command.length() > 0) {
        Serial.print("Unknown command: '");
        Serial.print(command);
        Serial.println("'");
      }
    }
  }
}

// =================================| Stop motor function |=================================

void stopMotor(const char* reason) {
  currentState = IDLE;
  digitalWrite(ENABLE_PIN, HIGH);
  Serial.print(reason);
  Serial.println("Motor stopped and disabled. Please enter your next command");
  Serial.println("_");
  }


// =================================| **** MAIN LOOP ****  |=================================

void loop() {
  handleSerialCommands();

  switch (currentState) {
    case IDLE:
      // Don't need a delay here, allows for responsive command handling
      break;

    case MOVING_OPEN:
      if (millis() - movementStartTime > MOVEMENT_TIMEOUT_MS) {
        stopMotor("Movement timed out as Open limit switch not triggered. ");
      } else if (digitalRead(OPEN_SWITCH_PIN) == LOW) {
        stopMotor("Open limit switch triggered. ");
      } else {
        moveMotor();
      }
      break;

    case MOVING_CLOSE:
      if (millis() - movementStartTime > MOVEMENT_TIMEOUT_MS) {
        stopMotor("Movement timed out as CLOSED limit switch not triggered. ");
      } else if (digitalRead(CLOSED_SWITCH_PIN) == LOW) {
        stopMotor("Closed limit switch triggered. ");
      } else {
        moveMotor();
      }
      break;
  }
}

// =================================| Motor movement function |=================================

void moveMotor() {
  digitalWrite(STEP_PIN, HIGH);
  delayMicroseconds(STEP_DELAY / 2);
  digitalWrite(STEP_PIN, LOW);
  delayMicroseconds(STEP_DELAY / 2);
}

// Optional diagnostics
void printDriverStatus() {
  Serial.print("Driver Status: ");
  if (driver.ot())     Serial.print("Overtemperature ");
  if (driver.otpw())   Serial.print("Warning ");
  if (driver.s2ga())   Serial.print("Short to GND A ");
  if (driver.s2gb())   Serial.print("Short to GND B ");
  if (driver.s2vsa())  Serial.print("Short to VS A ");
  if (driver.s2vsb())  Serial.print("Short to VS B ");
  if (driver.ola())    Serial.print("Open Load A ");
  if (driver.olb())    Serial.print("Open Load B ");
  Serial.println();
}

// =================================| UART coms test |=================================

bool testTMC2208() {
  // Read GCONF register (0x00)
  uint8_t cmd[] = {0x05, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8A};
  
  Serial.print("Sending command: ");
  for (int i = 0; i < 7; i++) {
    Serial.print("0x");
    Serial.print(cmd[i], HEX);
    Serial.print(" ");
  }
  Serial.println();
  
  tmc_serial.write(cmd, 7);
  delay(10);
  
  if (tmc_serial.available() >= 8) {
    Serial.print("Response received: ");
    uint8_t response[8];
    tmc_serial.readBytes(response, 8);
    
    for (int i = 0; i < 8; i++) {
      Serial.print("0x");
      Serial.print(response[i], HEX);
      Serial.print(" ");
    }
    Serial.println();
    return true;
  } else {
    Serial.println("No response received");
    return false;
  }
}
